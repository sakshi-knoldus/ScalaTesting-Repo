[0m[[0m[0mdebug[0m] [0m[0m> Exec(collectAnalyses, None, Some(CommandSource(network-1)))[0m
[0m[[0m[0mdebug[0m] [0m[0mUnhandled notification received: initialized: JsonRpcNotificationMessage(2.0, initialized, {})[0m
[0m[[0m[0mdebug[0m] [0m[0mUnhandled notification received: textDocument/didOpen: JsonRpcNotificationMessage(2.0, textDocument/didOpen, {"textDocument":{"uri":"file:///home/knoldus/Workspace/UT-IT/src/test/scala/PasswordValidator.scala","languageId":"scala","version":1,"text":"\nimport org.scalatest.flatspec.AnyFlatSpec\nimport scala.util.matching.Regex\nimport org.scalatest._\n\nclass PasswordValidator extends FlatSpec with Matchers {\n\n    def isValid(password:String):Boolean={\n       val regex= new Regex(\"^(?=.*[A-Z])(?=.*[!@#$&*])(?=.*[0-9])(?=.*[a-z].{8-15}$\")\n       if(regex findAllIn password >0) return true\n       else return false\n    \n    }\n  println(assert(isValid(\"122\"))+\" \"\n  assert(isValid(\"12hhh2\"))  \n  )\n}\nobject Main{\n  def main(args:Array[String]){\n  //   val obj =new CompanyValidator()\n  //   var company =new Company(\"Philips\",\"abc@gmail.com\",\"noida\");\n  //  println(obj.companyIsValid(company))\n  val obj = new PasswordValidator()\n  println(obj.isValid(\"1qwhhj66\"))\n  \n\n  }\n}\n"}})[0m
[0m[[0m[0mdebug[0m] [0m[0mUnhandled notification received: textDocument/didOpen: JsonRpcNotificationMessage(2.0, textDocument/didOpen, {"textDocument":{"uri":"file:///home/knoldus/Workspace/UT-IT/src/test/scala/FactorialTest.scala","languageId":"scala","version":1,"text":"import org.scalatest.flatspec.AnyFlatSpec\n\nclass FactorialTest extends AnyFlatSpec {\n  \"factorial\" should \"handle StackOverflowError\" in {\n    val fact = new Factorial()\n    val ans = fact.factorial(5)\n    assert(ans==120)\n  }\n  it should \"throw NoSuchElementExpected if the input value is 0 or negative\" in {\n    val fact = new Factorial()\n    assertThrows[NoSuchElementExpection] {\n      fact.factorial(-5)\n    }\n  }\n\n}"}})[0m
[0m[[0m[0mdebug[0m] [0m[0mUnhandled notification received: textDocument/didOpen: JsonRpcNotificationMessage(2.0, textDocument/didOpen, {"textDocument":{"uri":"file:///home/knoldus/Workspace/UT-IT/src/main/scala/com/knoldus/request/EmployeeImpl.scala","languageId":"scala","version":1,"text":"package com.knoldus.request\n\nimport com.knoldus.models.Employee\nimport com.knoldus.validator.EmployeeValidator\n\nclass EmployeeImpl(employeeValidator: String) {\n\n  def createEmployee(employee: Employee): Option[String] = {\n    if (employeeValidator.employeeIsValid(employee)) Option(employee.emailId)\n    else None\n  }\n}\n"}})[0m
[0m[[0m[0mdebug[0m] [0m[0mUnhandled notification received: textDocument/didOpen: JsonRpcNotificationMessage(2.0, textDocument/didOpen, {"textDocument":{"uri":"file:///home/knoldus/Workspace/UT-IT/src/test/scala/PalindromeTest.scala","languageId":"scala","version":13,"text":"import org.scalatest.flatspec.AnyFlatSpec\nimport orgs.testng.Assert;\n\nclass PalindromeTest extends AnyFlatSpec {\n \"Pa\"\n}\n\n\n"}})[0m
[0m[[0m[0mdebug[0m] [0m[0mUnhandled notification received: textDocument/didOpen: JsonRpcNotificationMessage(2.0, textDocument/didOpen, {"textDocument":{"uri":"file:///home/knoldus/Workspace/UT-IT/src/main/scala/com/knoldus/validator/CompanyValidator.scala","languageId":"scala","version":1,"text":"package com.knoldus.validator\n\nimport com.knoldus.models.Company \nimport com.knoldus.db.CompanyReadDto \n\n\nclass CompanyValidator {\n\n  def companyIsValid(company: Company): Boolean = {\n    val cmp= new CompanyReadDto()\n    for((key,value)<-cmp.companies){\n      if( key == company.name )  \n      return true\n    }\n    return false\n  }\n\n}\nobject Main{\n  def main(args:Array[String]){\n    val obj =new CompanyValidator()\n    var company =new Company(\"Philips\",\"abc@gmail.com\",\"noida\");\n   println(obj.companyIsValid(company))\n \n  }\n}\n\n// def factorial(num:Int):Int={\n//   if(num==1) 1\n//   return num*factorial(num-1)\n\n// }\n// def check_palindrome(str:String):Boolean={\n//   for(i<-0 until str.length){\n//     if(str(i)!=str(str.length-i-1)) return false\n\n//   }\n//   return true\n// }\n//test for factorial and check_palindrome\n\n\n// 1. Write a code and unit test cases to check if a password is valid or not.\n//  Only the rules mentioned below needs to be tested:\n//     i. Password should not contain any space.\n//     ii. Password should contain at least one digit(0-9).\n//     iii. Password length should be between 8 to 15 characters.\n//     iv. Password should contain at least one lowercase letter(a-z).\n//     v. Password should contain at least one uppercase letter(A-Z).\n//     vi. Password should contain at least one special character ( @, #, %, &, !, $, etc\n\n// 2. Create an interface with the following methods and a class implementing these methods with unit test\n//  cases.\n//     i. check if a number is palindrome or not\n//     ii. factorial\n\n// 3. Write the unit and integration test cases after completing the implementation of the following classes. \n// The framework has already been created and most of the implementation of methods already exists.\n\n// Add the following validation in respective classes.\n//     a) User Validation Class: \n//         i. Checks if company exists in database\n//         ii. Checks if email id is valid.\n\n//     b) Company Validation Class: \n//         i. Company should not already exists in database\n//         ii. Checks if email id is valid.\n//     c) Email Validation Class :\n//         i. Checks if email is valid.\n       \n"}})[0m
[0m[[0m[0mdebug[0m] [0m[0mjsonRpcNotify: JsonRpcNotificationMessage(2.0, build/logMessage, {"type":4,"message":"Processing"})[0m
[0m[[0m[0mdebug[0m] [0m[0mEvaluating tasks: Compile / collectAnalyses[0m
[0m[[0m[0mdebug[0m] [0m[0mRunning task... Cancel: Signal, check cycles: false, forcegc: true[0m
[0m[[0m[0mdebug[0m] [0m[0manalysis location (/home/knoldus/Workspace/UT-IT/target/scala-2.13/zinc/inc_compile_2.13.zip,true)[0m
[0m[[0m[32msuccess[0m] [0m[0mTotal time: 1 s, completed 6 May 2021, 18:42:29[0m
[0m[[0m[0mdebug[0m] [0m[0mjsonRpcNotify: JsonRpcNotificationMessage(2.0, build/logMessage, {"type":4,"message":"Done"})[0m
[0m[[0m[0mdebug[0m] [0m[0m> Exec(shell, None, None)[0m
[0m[[0m[0mdebug[0m] [0m[0mForcing garbage collection...[0m
